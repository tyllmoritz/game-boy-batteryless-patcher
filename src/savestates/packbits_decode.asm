;***************************************************************************
;
; Uncompress some data that has been compressed using PackBits compression
; See: https://en.wikipedia.org/wiki/PackBits
;
; INPUT:
; HL = source address
; DE = destination address
; BC = length of uncompressed data in bytes
;
; Function length: 39 bytes
;
;***************************************************************************

PACKBITS_DECODE:
    
    ; set BC to the end of output address
    ld a,e
    add c
    ld c,a

    ld a,d
    adc b
    ld b,a


PACKBITS_DECODE_MAIN_LOOP:

    ; check if we have reached the end of the output data
    ld a,c
    cp e
    jr nz,PACKBITS_DECODE_READ_NEXT_HEADER_BYTE

    ld a,b
    cp d
    ret z      ; all done - return


PACKBITS_DECODE_READ_NEXT_HEADER_BYTE:

    ; read the header byte
    ld a,[hl+]   

    ; save the end output address
    push bc

    ; copy header byte into C for looping on later
    ld c,a
    
    ; check if literal data (bit 7 unset) or a repeated byte (bit 7 set)
    bit 7,a
    jr nz,PACKBITS_DECODE_REPEATED_BYTE




PACKBITS_DECODE_LITERAL_DATA:
    
    ; need to loop one more time than the counter value
    inc c

PACKBITS_DECODE_LITERAL_DATA_LOOP:
    
    ; copy one byte of the data
    ld a,[hl+]
    ld [de],a
    inc de

    dec c
    jr nz,PACKBITS_DECODE_LITERAL_DATA_LOOP

    jr PACKBITS_DECODE_BYTE_DONE




PACKBITS_DECODE_REPEATED_BYTE:

    ; header byte value -128 = no operation (skip and treat next byte as a header byte).
    ; this is never generated by the PACKBITS_ENCODE function so commented out by default.
    ; if unpacking other PackBits data then you should uncomment these two lines.

    ;cp $80                       
    ;jr z,PACKBITS_DECODE_BYTE_DONE

    ; need to loop one more time than the counter value
    dec c

    ; read the byte value to be repeated in the output
    ld a,[hl+]

PACKBITS_DECODE_REPEATED_BYTE_LOOP:    

    ld [de],a
    inc de

    ; increase the negative counter value towards reset
    inc c
    jr nz,PACKBITS_DECODE_REPEATED_BYTE_LOOP




PACKBITS_DECODE_BYTE_DONE:

    ; restore the end output address 
    pop bc

    jr PACKBITS_DECODE_MAIN_LOOP




PACKBITS_DECODE_END_OF_FUNCTION:
